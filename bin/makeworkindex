#!/usr/bin/perl
#
# Programmer:    Craig Stuart Sapp <craig.stanford.edu>
# Creation Date: Thu Dec 26 23:22:16 PST 2019
# Last Modified: Thu Dec 26 23:22:20 PST 2019
# Filename:      makeworklist
# Syntax:        perl 5
# vim:           ts=3
#
# Description:   Create a JSON work index for use on the JRP website, 
#                https://josquin.stanford.edu.
#

use strict;

##############################
##
## Humdrum tools used in this script.  If they are not found, then
## install https://github.com/humdrum-tools/humdrum-tools.
##

my $notecount = `which notecount`;
chomp $notecount;
if ($notecount =~ /^\s*$/) {
	die "Error: cannot find notecount Humdrum Extras tool\n";
}

my $extractx = `which extractx`;
chomp $extractx;
if ($extractx =~ /^\s*$/) {
	die "Error: cannot find extractx Humdrum Extras tool\n";
}

my $ridx = `which ridx`;
chomp $ridx;
if ($ridx =~ /^\s*$/) {
	die "Error: cannot find ridx Humdrum Extras tool\n";
}

##############################

my $Basedir = ".";
my @Replist = getRepertoryList($Basedir);
my %Composer = getComposerList("$Basedir/info/composer.txt");
my %NoteCounts = getNoteCounts($Basedir, @Replist);
print join("\n", %NoteCounts), "\n";

print "[\n";

for  (my $i=0; $i<@Replist; $i++) {
	my $commaQ = 1;
	$commaQ = 0 if $i == $#Replist;
	printRepertory($Basedir, $Replist[$i], $commaQ);
	print "\n";
}

print "]\n";


exit(0);


###########################################################################


##############################
##
## getNoteCounts --
##

sub getNoteCounts {
	my ($basedir, @reps) = @_;
	my %output;
	foreach my $rep (@reps) {
		my @files = glob("$rep/kern/*.krn");
		foreach my $file (@files) {
			my $notecount = `$notecount $file | $extractx -i sound | $ridx -H`;
			chomp $notecount;
			my $id = $file;
			$id =~ s/.*\///;
			$id =~ s/-.*//;
			$id =~ s/.krn$//;
			if ($output{$id} !~ /^\s*$/) {
				die "Error: $id occurs more than once is files, such as $file\n";
			}
			$output{$id} = $notecount;
		}
	}
	return %output;
}


##############################
##
## getRepertoryList --  Ignore Zma (masses), Zmo (motets), Zso (songs),
##     if present.
##

sub getRepertoryList {
	my ($basedir) = @_;
	my @list = glob("$basedir/[A-Y][a-z][a-z]/kern");
	my @output;
	my $ano = 0;
	for (my $i=0; $i<@list; $i++) {
		$list[$i] =~ s/$basedir\///;
		$list[$i] =~ s/\/kern$//;
		next if $list[$i] eq "Joa";  # ignore secure Josquin group if present
		next if $list[$i] eq "Job";  # ignore non-secure Josquin group if present
		if ($list[$i] eq "Ano") {
			$ano = 1;
			next;
		}
		$output[@output] = $list[$i];
	}
	# Place Anonymous list first
	@output = sort @output;
	unshift(@output, "Ano");
	return @output;
}



##############################
##
## getComposerList --
##

sub getComposerList {
	my ($file) = @_;
	open (FILE, $file) or die "Cannot find composer list $file\n";
	my $line;
	my %output;
	while ($line = <FILE>) {
		chomp $line;
		next if $line =~ /^\s*$/;
		my @data = split(/\t+/, $line);
		next if @data < 3;
		my $abbr  = $data[0];
		my $name  = $data[1];
		my $dates = $data[2];
		$output{$abbr} = "$name\t$dates";
	}
	close FILE;
	return %output;
}



##############################
##
## printRepertory --
##

sub printRepertory {
	my ($basedir, $rep, $commaQ) = @_;

	my %worklist = getWorkList($basedir, $rep);

	my $workcount  = $worklist{"workcount"}    || 0;
	my $masscount  = $worklist{"masscount"}    || 0;
	my $motetcount = $worklist{"motetcount"}   || 0;
	my $songcount  = $worklist{"songcount"}    || 0;
	my $notecount  = $worklist{"notecount"}    || 0;
	my $seconds    = $worklist{"seconds"}      || 0;
	my $pages      = $worklist{"pages"}        || 0;
	my $worklist   = $worklist{"worklist"};
	my $comshort   = $worklist{"comshort"}     || "";
	my $comlong    = $worklist{"comlong"}      || "";
	my $comdates   = $worklist{"comdates"}     || "";
	my $liststyle  = "genre";
	#$liststyle  = "alphabetical";

print <<EOT;
{
"repid"		:	"$rep",
"reprole"	:	"composer",
"comlong"	:	"$comlong",
"comshort"	:	"$comshort",
"comdates"	:	"$comdates",
"repwork"	:	$workcount,
"genres"	:
	[
	{"name":"mass", "count":$masscount},
	{"name":"motet", "count":$motetcount},
	{"name":"song", "count":$songcount}
	],
"liststyle"	:	"$liststyle",
"notecount"	:	$notecount,
"sec"		:	$seconds,
"pg"		:	$pages,
EOT

	print "\"works\"	:\n";
	print "\t[\n";
	print $worklist;
	print "\t]\n";
	print "}";
	print "," if $commaQ;
	print "\n";
}



##############################
##
## getSections --
##


sub getSections {
	my @files = @_;
	my %output;
	for (my $i=0; $i<@files; $i++) {
		my $file = $files[$i];
		my $id = $file;
		$id =~ s/.*\///;
		$id =~ s/.krn$//;
		if ($id !~ /^([A-Z][a-z][a-z]\d{4}[^-]*)-?/) {
			die "Error: file does not have a correctly formatted ID: $file\n";
		}
		$id = $1;
		if ($id !~ /^([A-Z][a-z][a-z]\d{4}\.?\d*)(.*)/) {
			die "Error: ID is not well formatted: $id\n";
		}
		my $workid = $1;
		my $section = $2;
		if ($output{$workid} !~ /^\s*$/) {
			$output{$workid} .= "\t$id";
		} else {
			$output{$workid} = $id;
		}
	}
	return %output;
}


##############################
##
## getWorkList --
##

sub getWorkList {
	my ($basedir, $rep) = @_;
	my %output;

	my $cinfo = $Composer{$rep};
print STDERR "PROCESSING COMPOSER\t$cinfo\n";
	my @cdata  = split(/\t+/, $cinfo);
	my $cname  = $cdata[0];
	my $cdates = $cdata[1];
	$cdates = "" if $cdates eq ".";
	my $comlong = $cname;
	$comlong =~ s/[{}]+//g;
	my $comshort = $cname;
	$comshort =~ s/\}[^{]*\{//g;
	$comshort =~ s/^[^{]*\{//;
	$comshort =~ s/\}[^}]*$//;
	$output{"comlong"} = $comlong;

	if ($rep eq "Rue") {
		$comshort = "La Rue";
	}

	$output{"comshort"} = $comshort;
	$output{"comdates"} = $cdates;

	my @files = sort glob("$basedir/$rep/kern/*.krn");
	my %sections = getSections(@files);
	my $workcount = @files;
	$output{"workcount"} = $workcount;

	my %workinfo;
	for (my $i=0; $i<@files; $i++) {
		my $file = $files[$i];
print STDERR "PROCESSING FILE $file\n";
		my $id = $file;
		$id =~ s/.*\///;
		$id =~ s/.krn$//;
		$id =~ s/-.*//;
		my $workid;
		if ($id =~ /^([A-Z][a-z][a-z]\d{4}\.?\d*)(.*)/) {
			$workid = $1;
		} else {
			die "Poorly formed work ID for file $file\n";
		}
		my $sectioninfo = $sections{$workid};
		if ($sectioninfo =~ /^\s*$/) {
			die "Strange error for file $file\n";
		}
		%workinfo = getWorkInfo($file, $id, $workid, $sectioninfo);
		$output{"masscount"}  += $workinfo{"masscount"};
		$output{"motetcount"} += $workinfo{"motetcount"};
		$output{"songcount"}  += $workinfo{"songcount"};
		$output{"notecount"}  += $workinfo{"notecount"};
		$output{"seconds"}    += $workinfo{"seconds"};
		$output{"pages"}      += $workinfo{"pages"};
	}

	return %output;
}



##############################
##
## getWorkInfo --
##

sub getWorkInfo {
	my ($file, $id, $workid, $sections) = @_;
print "FILE $file, ID $id, WORKID, $workid, SECTIONS $sections\n";
	my %output;
	$output{"masscount"}  = 0;
	$output{"motetcount"} = 0;
	$output{"songcount"}  = 0;
	open (FILE, $file) or die "Cannot open $file for reacing";
	my @contents = <FILE>;
	close FILE;
	chomp @contents;

	my %references;
	for (my $i=0; $i<@contents; $i++) {
		my $line = $contents[$i];
		if ($line =~ /^!!!([^!:]+)\s*:\s*(.*)\s*$/) {
			my $key = $1;
			my $value = $2;
			$references{$key} = $value;
		}
	}

	# Extract the genre information
	my $genre;
	my $AGN = $references{"AGN"};
	if ($AGN =~ /^\s*$/) {
		print STDERR "Warning: no genre information in $file\n";
	}
	if ($AGN =~ /mass/i) {
		$output{"masscount"} = 1;
		$genre = "mass";
	} elsif ($AGN =~ /motet/i) {
		$output{"motetcount"} = 1;
		$genre = "motet";
	} elsif ($AGN =~ /song/i) {
		$output{"songcount"} = 1;
		$genre = "song";
	} elsif ($AGN =~ /chanson/i) {
		$output{"songcount"} = 1;
		$genre = "song";
	} else {
		print STDERR "Warning: genre \"$AGN\" is not standardized\n";
	}

	# Extract title

	# Get the number of sounding notes in the score:
	# my $notecount = `$notecount $file | $extractx -i sound | $ridx -H`;
	my $notecount = NoteCount{$id};
	die "Problem with notecount for $id\n" if $notecount =~ /^\s*$/;
	$notecount = 0 if $notecount =~ /^\s*$/;
	$output{"notecount"} = $notecount;

	my $filename = $file;
	$filename =~ s/.*\///;

	my $title = "";        # title of work
	my $voices;            # number of voices
	my $vname;             # names of voices
	my $vabbr;             # abbreviation of voices
	my $ih = 0;
	my $sec = 0;           # seconds for performance
	my $pg = 0;            # page count in PDF
	my $vnotecount = 0;    # count of notes by voice
	my $ad = 0;            # add date
	my $ud = 0;            # update date

	my $data = "";
	$data .= "\t{\n";
	$data .= "\t\"id\"\t\t:\t\"$workid\",\n";
	$data .= "\t\"filename\"\t:\t\"$filename\",\n";
	$data .= "\t\"title\"\t:\t\"$title\",\n";
	$data .= "\t\"genre\"\t:\t\"$genre\",\n";
	$data .= "\t\"voices\"\t:\t\"$voices\",\n";
	$data .= "\t\"vname\"\t:\t\"$vname\",\n";
	$data .= "\t\"vabbr\"\t:\t\"$vabbr\",\n";
	$data .= "\t\"ih\"\t:\t$ih,\n";
	$data .= "\t\"notecount\"\t:\t$notecount,\n";
	$data .= "\t\"sec\"\t:\t$sec,\n";
	$data .= "\t\"pg\"\t:\t$pg,\n";
	$data .= "\t\"vnotecount\"\t:\t$vnotecount,\n";
	$data .= "\t\"ad\"\t:\t$ad,\n";
	$data .= "\t\"ud\"\t:\t$ud,\n";
	$output{"data"} = $data;

	return %output;
}



